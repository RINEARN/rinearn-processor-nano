/*
 * This script file is to specify values of various setting parameters of RINEARN Processor nano.
 * This code is written in the C-like simple scripting language "Vnano (VCSSL nano)".
 * For the syntax, see: https://github.com/RINEARN/vnano/#language
 * 
 * このスクリプトファイルでは、リニアンプロセッサー nano の各種設定パラメータの値を指定できます。
 * このコードは、C言語系の文法の簡易スクリプト言語「Vnano (VCSSL nano)」で書かれています。
 * 文法などについては： https://github.com/RINEARN/vnano/#language
 * 
 * License: CC0
 */


// **************************************************************************************************************
//         - User Settings -
//         - ユーザー関連の設定 -
// **************************************************************************************************************


// --------------------------------------------------------------------------------------------------------------
// Specify the locale-code. You can switch the language used for displaying messages by this setting.
// ロケールコードを指定します。メッセージの表示言語は、このロケールコードによって決定されます。
// (Type: string)
// --------------------------------------------------------------------------------------------------------------

localeCode = "AUTO";         // Set automatically based on your environment.
// localeCode = "en-US";     // US English
// localeCode = "ja-JP";     // Japanese





// **************************************************************************************************************
//         - Calculation Settings -
//         - 計算関連の設定 -
// **************************************************************************************************************


// --------------------------------------------------------------------------------------------------------------
// Specify whether round the calculated value or not.
// 計算結果を丸めて表示するかどうかを指定します。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

outputRounderEnabled = true;        // Round       - 丸める
// outputRounderEnabled = false;    // Don't round - 丸めない


// --------------------------------------------------------------------------------------------------------------
// Specify how round the calculated value.
// 計算結果をどのように丸めるかを指定します。
// (Type: string)
// --------------------------------------------------------------------------------------------------------------

roundingMode = "HALF_UP";
// roundingMode = "HALF_DOWN";
// roundingMode = "HALF_EVEN";
// roundingMode = "UP";
// roundingMode = "DOWN";


// --------------------------------------------------------------------------------------------------------------
// Specify what part of the calculated value you want to round.
// 計算結果の中で、丸めたい箇所を指定します。
// (Type: string)
// --------------------------------------------------------------------------------------------------------------

roundingTarget = "SIGNIFICAND";           // Significand of the floating point number          - 浮動小数点数の仮数部(有効桁数)
// roundingTarget = "AFTER_FIXED_POINT";  // After the decimal point of the fixed point number - 固定小数点数の小数点以下の部分


// --------------------------------------------------------------------------------------------------------------
// Specify what the length (digits) do you want to round the part of "roundingTarget" in.
// 上の "roundingTarget" で指定した部分を、何桁に丸めたいかを指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

roundingLength = 10;


// --------------------------------------------------------------------------------------------------------------
// The option to handle numbers (including integers) in inputted expressions as floating-point numbers (64bit).
// This option does not affect to the interpretation of the code in the library file (Library.vnano).
// INPUT欄に入力された数式内で、数字（整数を含む）を浮動小数点数（64bit精度）として扱うオプションです。
// なお、このオプションは、ライブラリファイル（Library.vnano）内のコード内容の解釈には影響しません。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

evalNumberAsFloat = true;          // Enable  - 有効化する
// evalNumberAsFloat = false;      // Disable - 無効化する


// --------------------------------------------------------------------------------------------------------------
// Specify whether take Unicode-normalization to the inputted content or not.
// INPUT欄の入力内容の中の文字に対して、Unicode正規化を行うかどうかを指定します。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

inputNormalizerEnabled = true;        // Normalize       - 正規化する
// inputNormalizerEnabled = false;    // Don't normalize - 正規化しない





// **************************************************************************************************************
//         - User Interface Settings -
//         - 画面関連の設定 -
// **************************************************************************************************************


// --------------------------------------------------------------------------------------------------------------
// Specify whether display the window of RINEARN Processor nano on the top of all other windows or not.
// リニアンプロセッサー nano のウィンドウを、常に最前面に表示するかどうかを指定します。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

stayOnTopOfAllWindows = true;        // Yes, display on the top - 最前面に表示する
// stayOnTopOfAllWindows = false;    // No, not necessary       - 最前面の必要は無い


// --------------------------------------------------------------------------------------------------------------
// Specity the font size of INPUT/OUTPUT text fields.
// INPUT/OUTPUT テキストフィールドで使用するフォントの大きさを指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

textFieldFontSize = 18;


// --------------------------------------------------------------------------------------------------------------
// Specify the size of the window.
// ウィンドウの大きさを指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

windowWidth = 400;     // Width (px) - 幅  (ピクセル)
windowHeight = 160;    // Height(px) - 高さ(ピクセル)


// --------------------------------------------------------------------------------------------------------------
// Specify the opacity of the window.
// ウィンドウの不透明度を指定します。
// (Type: float)
// --------------------------------------------------------------------------------------------------------------

windowOpacity = 0.76;     // 0.0 ~ 1.0


// --------------------------------------------------------------------------------------------------------------
// Specify the background color of the window.
// ウィンドウの背景色を指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

windowBackgroundColorR = 180;        // Red   - 赤成分 (0 ~ 255)
windowBackgroundColorG = 220;        // Green - 緑成分 (0 ~ 255)
windowBackgroundColorB = 255;        // Blue  - 青成分 (0 ~ 255)


// --------------------------------------------------------------------------------------------------------------
// Specify the background color of INPUT/OUTPUT text fields.
// INPUT/OUTPUT テキストフィールドの背景色を指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

textFieldBackgroundColorR = 100;     // Red   - 赤成分 (0 ~ 255)
textFieldBackgroundColorG = 100;     // Green - 緑成分 (0 ~ 255)
textFieldBackgroundColorB = 100;     // Blue  - 青成分 (0 ~ 255)


// --------------------------------------------------------------------------------------------------------------
// Specify the foreground color (the color of characters) of INPUT/OUTPUT text fields.
// INPUT/OUTPUT テキストフィールドの前景色（文字の色）を指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

textFieldForegroundColorR = 140;     // Red   - 赤成分 (0 ~ 255)
textFieldForegroundColorG = 255;     // Green - 緑成分 (0 ~ 255)
textFieldForegroundColorB = 180;     // Blue  - 青成分 (0 ~ 255)





// **************************************************************************************************************
//         - Script Settings -
//         - スクリプト関連の設定 -
// **************************************************************************************************************


// --------------------------------------------------------------------------------------------------------------
// Specify the location of library scripts in which variables and functions are defined.
// Library scripts in the specified location will be loaded automatically.
// 変数や関数を定義する、ライブラリスクリプトの配置場所を指定します。
// 指定された場所にあるライブラリスクリプトは、自動で読み込まれます。
// (Type: string)
// --------------------------------------------------------------------------------------------------------------

libraryFolder = "./lib/";         // Folder to put libraries - ライブラリの配置先フォルダ
libraryEncoding = "UTF-8";        // Text-encoding of library files - ライブラリのファイルの文字コード
libraryExtension = ".vnano";      // The extention of library files - ライブラリのファイルの拡張子


// --------------------------------------------------------------------------------------------------------------
// Specify plug-ins by dot-separated relative paths (without extension) from "plugin" folder.
// 使用するプラグインを、「 plugin 」フォルダから見たドット区切りの相対パス（拡張子なし）で指定します。
// (Type: string[])
// --------------------------------------------------------------------------------------------------------------

// Contain paths of plug-ins in an array - 配列を用意し、その中にプラグインのパスを格納
string tmpPluginPaths[2];
tmpPluginPaths[0] = "org.vcssl.nano.plugin.calc.xci1.ScientificCalculatorPlugin";
tmpPluginPaths[1] = "ExamplePlugin";

// Specify the above array as the setting value - 上で用意した配列を設定値に指定
pluginPaths = tmpPluginPaths;


// --------------------------------------------------------------------------------------------------------------
// Specify whether dump intermediate code, Abstract Syntax Tree (AST), etc.  (for debugging)
// 中間コードや抽象構文木(AST)などをダンプするかどうかを指定します。        （デバッグ用）
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

dumperEnabled = false;      // Don't dump - ダンプしない
// dumperEnabled = true;    // Dump       - ダンプする


// --------------------------------------------------------------------------------------------------------------
// Specify the content to dump. (for debugging)
// ダンプする対象を指定します。（デバッグ用）
// (Type: string)
// --------------------------------------------------------------------------------------------------------------

dumperTarget = "ALL";                  // All of the following contents - 下記の内容のすべて
// dumperTarget = "INPUTTED_CODE";     // Content of the inputted inputted code - エンジンに入力されたコードの内容
// dumperTarget = "PREPROCESSED_CODE"; // Result code of the preprocessor - プリプロセッサ処理済みの内容
// dumperTarget = "TOKEN";             // Tokens generated by the lexical analyzer - 字句解析結果のトークン
// dumperTarget = "PARSED_AST";        // AST generated by the parser - 構文解析結果のAST
// dumperTarget = "ANALYZED_AST";      // AST generated by the semantic analyzer - 意味解析結果のAST
// dumperTarget = "ASSEMBLY_CODE";     // Virtual assembly code generated by the compiler - コンパイル結果の仮想的なアセンブリコード
// dumperTarget = "OBJECT_CODE";       // Virtual object code running on the VM, generated by the assembler - VM上で実行される、アセンブル済みの仮想的なオブジェクトコード
// dumperTarget = "ACCELERATOR_CODE";  // Optimized instruction code running on the high-speed VM - 高速版VM上で実行される、最適化済みの命令コード 
// dumperTarget = "ACCELERATOR_STATE"; // Internal state of the initialized accelerator - 高速版VMの初期化後の内部状態


// --------------------------------------------------------------------------------------------------------------
// Specify whether enable the high-speed VM or not. If the behaviour seems to be strange, disable it.
// 高速版のVMを有効化するかどうかを指定します。挙動がおかしい場合は、試しに無効にしてみてください。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

acceleratorEnabled = true;         // Enable  - 有効化する  (Performance: About 400 MFLOPS ~ 5 GFLOPS)
// acceleratorEnabled = false;     // Disable - 無効化する  (Performance: About 10 MFLOPS)

